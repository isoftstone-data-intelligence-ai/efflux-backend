from typing import List, Optional
from pydantic import BaseModel, Field

class ArtifactsSchema(BaseModel):
    """代码片段模型，用于定义生成代码片段时所需的所有相关信息"""

    # 详细说明生成代码片段的步骤和计划
    commentary: str = Field(
        description="Describe what you're about to do and the steps you want to take for generating the fragment in great detail."
    )

    # 用于生成代码片段的模板名称
    template: str = Field(
        description="Name of the template used to generate the fragment."
    )

    # 代码片段的简短标题，不超过3个单词
    title: str = Field(
        description="Short title of the fragment. Max 3 words."
    )

    # 代码片段的简短描述，不超过一句话
    description: str = Field(
        description="Short description of the fragment. Max 1 sentence."
    )

    # 代码片段需要的额外依赖项列表，不包括模板中已包含的依赖
    additional_dependencies: List[str] = Field(
        description="Additional dependencies required by the fragment. Do not include dependencies that are already included in the template."
    )

    # 标识是否需要安装额外的依赖项
    has_additional_dependencies: bool = Field(
        description="Detect if additional dependencies that are not included in the template are required by the fragment."
    )

    # 安装额外依赖项的具体命令
    install_dependencies_command: str = Field(
        description="Command to install additional dependencies required by the fragment."
    )

    # 代码片段使用的端口号，如果不需要暴露端口则为 None
    port: Optional[int] = Field(
        None,
        description="Port number used by the resulted fragment. Null when no ports are exposed."
    )

    # 文件的相对路径，包含文件名
    file_path: str = Field(
        description="Relative path to the file, including the file name."
    )

    # 生成的代码内容，必须是可运行的代码
    code: str = Field(
        description="Code generated by the fragment. Only runnable code is allowed."
    )